"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[999],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),s=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(n),f=r,k=d["".concat(l,".").concat(f)]||d[f]||p[f]||a;return n?o.createElement(k,i(i({ref:t},u),{},{components:n})):o.createElement(k,i({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2629:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return p},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return s}});var o=n(3117),r=(n(7294),n(3905));const a={sidebar_position:2},i="Token Price",c={unversionedId:"walletkit/data-provider/price-provider",id:"walletkit/data-provider/price-provider",title:"Token Price",description:"Introduction",source:"@site/docs/walletkit/data-provider/price-provider.md",sourceDirName:"walletkit/data-provider",slug:"/walletkit/data-provider/price-provider",permalink:"/docs/walletkit/data-provider/price-provider",draft:!1,editUrl:"https://github.com/niomon/niomon-docs/blob/main/docs/walletkit/data-provider/price-provider.md",tags:[],version:"current",lastUpdatedAt:1667986870,formattedLastUpdatedAt:"Nov 9, 2022",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docs",previous:{title:"Token Metadata and Balance",permalink:"/docs/walletkit/data-provider/token-provider"},next:{title:"NFT",permalink:"/docs/walletkit/data-provider/nft"}},l={},s=[{value:"Introduction",id:"introduction",level:2},{value:"Set up a data provider for token price",id:"set-up-a-data-provider-for-token-price",level:2},{value:"Fetch exchange rate of a token",id:"fetch-exchange-rate-of-a-token",level:2},{value:"Show token balance in fiat currency",id:"show-token-balance-in-fiat-currency",level:2},{value:"Complete example",id:"complete-example",level:2},{value:"Summary",id:"summary",level:2}],u={toc:s};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"token-price"},"Token Price"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"As a medium of exchange in digital form, it is crucial to have price information for crypto under the market, the following sections state how to get the such information, it also features an example on getting a fiat amount with respect to token balance."),(0,r.kt)("h2",{id:"set-up-a-data-provider-for-token-price"},"Set up a data provider for token price"),(0,r.kt)("p",null,"Assume the factory is already established, you can use the factory to return token price provider and access its underlying APIs, in this example, get the token price provider from Ethereum network."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"// The network which token(Both native and contract token like ERC-20 or ERC-721) are on.\nconst network = 'ethereum'\n\n// Initialize the API provider for the network.\nconst tokenProvider = adapterFactory.getPriceProivder(network)\n")),(0,r.kt)("p",null,"You can read Getting Started note on how to set up the adapter."),(0,r.kt)("h2",{id:"fetch-exchange-rate-of-a-token"},"Fetch exchange rate of a token"),(0,r.kt)("p",null,"There are two APIs to fetch exchange rate of a token, one is for native token and one is for contract token list ERC-20."),(0,r.kt)("p",null,"To get exchange rate of a native token, you just need to specify the fiat currency you would like to return, for example if you need both USD and JPY price for Ethereum token"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Example 1: Getting token price of a native token"',title:'"Example',"1:":!0,Getting:!0,token:!0,price:!0,of:!0,a:!0,native:!0,'token"':!0},"tokenProvider.getNativeTokenPrice(['usd', 'jpy']).then(console.log)\n")),(0,r.kt)("p",null,"This is the result returned:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Example Result 1: Getting token price of a native token"',title:'"Example',Result:!0,"1:":!0,Getting:!0,token:!0,price:!0,of:!0,a:!0,native:!0,'token"':!0},'{\n    "type": "native",\n    "network": "ethereum",\n    "prices": {\n        "usd": 1586.35,\n        "jpy": 234553\n    }\n}\n')),(0,r.kt)("p",null,"To get exchange rate of a contract token, you also need the address of the contract token you would like to return, for example if you need both USD and JPY price for USDT token"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Example 2: Getting token price of a contract token"',title:'"Example',"2:":!0,Getting:!0,token:!0,price:!0,of:!0,a:!0,contract:!0,'token"':!0},"// Contract address of USDT\nconst usdtContractAddress = '0xdAC17F958D2ee523a2206206994597C13D831ec7'\ntokenProvider.getContractTokenPrice([usdtContractAddress], ['usd', 'jpy']).then(console.log)\n")),(0,r.kt)("p",null,"This is the result returned:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Example Result 2: Getting token price of a contract token"',title:'"Example',Result:!0,"2:":!0,Getting:!0,token:!0,price:!0,of:!0,a:!0,contract:!0,'token"':!0},'[{\n    "type": "contract",\n    "contractAddress": "0xdAC17F958D2ee523a2206206994597C13D831ec7",\n    "network": "ethereum",\n    "prices": {\n        "jpy": 147.92,\n        "usd": 1.001\n    }\n}]\n')),(0,r.kt)("p",null,"WalletKit also provides a unified API to get both types of tokens at once, all you need is to specific the type explicitly."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Example 3: Getting token price of multiple tokens"',title:'"Example',"3:":!0,Getting:!0,token:!0,price:!0,of:!0,multiple:!0,'tokens"':!0},"// Denote to have both native token and USDT token\nconst tokens = [\n    {\n        type: 'native' // This denotes to get native token\n    },\n    {\n        type: 'contract', // This denotes to get contract token\n        contractAddress: '0xdAC17F958D2ee523a2206206994597C13D831ec7'\n    }\n]\n\ntokenProvider.getTokenPrices(tokens, ['usd', 'jpy']).then(console.log)\n")),(0,r.kt)("p",null,"This is the result returned:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Example Result 3: Getting token price of multiple tokens"',title:'"Example',Result:!0,"3:":!0,Getting:!0,token:!0,price:!0,of:!0,multiple:!0,'tokens"':!0},'[\n    {\n        "type": "native",\n        "network": "ethereum",\n        "prices": {\n            "usd": 1586.35,\n            "jpy": 234553\n        }\n    },\n    {\n        "type": "contract",\n        "contractAddress": "0xdAC17F958D2ee523a2206206994597C13D831ec7",\n        "network": "ethereum",\n        "prices": {\n            "jpy": 147.92,\n            "usd": 1.001\n        }\n    }\n]\n')),(0,r.kt)("h2",{id:"show-token-balance-in-fiat-currency"},"Show token balance in fiat currency"),(0,r.kt)("p",null,"One of the common scenario for getting the fiat amount of a token is to show the corresponding user\u2019s balance. This section demonstrate how this can be done."),(0,r.kt)("p",null,"To show the fiat amount, it requires user\u2019s balance of the token to calculate the fiat amount, the information can be get from token provider, you can refer to \u201cFetch token balance of a user\u201d in token provider section if necessary."),(0,r.kt)("p",null,"The following gives an example from that:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Example: Token balance of a contract token"',title:'"Example:',Token:!0,balance:!0,of:!0,a:!0,contract:!0,'token"':!0},'{\n    "balance": "0x0f4240",\n    "contractAddress": "0xdAC17F958D2ee523a2206206994597C13D831ec7",\n    "network": "ethereum",\n    "type": "contract"\n}\n')),(0,r.kt)("p",null,"By merging the balance result with the price result from previous section, you now have enough information to calculate the fiat amount."),(0,r.kt)("p",null,"WalletKit provides extra formatter to format crypto-related information based on ",(0,r.kt)("inlineCode",{parentName:"p"},"@formatjs/intl")," . You can refer to util section for more detail. For this part, it shows how to create the intl object and use the underlying formatter to return the fiat amount of the user\u2019s balance."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Example 4: Showing token balance in fiat currency"',title:'"Example',"4:":!0,Showing:!0,token:!0,balance:!0,in:!0,fiat:!0,'currency"':!0},"// The token object includes balance and price information\n// The price information\nconst token = {\n    balance: '0x0f4240',\n    contractAddress: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n    network: 'ethereum',\n    type: 'contract',\n    prices: {\n        // Exchange rate for the fiat currency. Corresponding currency is requried for formatting option.\n        // In this case the format option supports 'JPY' and 'USD' value.\n        jpy: 147.92,\n        usd: 1.001\n    }\n}\n\n// Optionally create cache to prevent memory leak\nconst cache = createIntlCache()\n// Create the intl object includes different formatters\nconst intl = createIntl({\n        locale: 'en-US' // Set the locale of the formatter\n    }),\n    cache\n)\n\n// Use the underlying formatter to return the fiat amount of the token\n// Provide no options to use default formatting. By default it calcuated based on USD price without further formatting\nconst simpleValue = intl.formatTokenValue(token)\nconsole.log(simpleValue) // Returns \"1.001\" based on USD price\n\n// Provide options for formatting. It is requires to denote the style in currency to show the currency sign\n// Set the currency for the corresponding amount, the same currency value is required to be in \"prices\" object in the token\nconst valueWithSign = intl.formatTokenValue(token, {style: 'currency', currency: 'JPY'})\nconsole.log(valueWithSign) // Returns \"\xa5147.92\" which is a JPY price\n")),(0,r.kt)("h2",{id:"complete-example"},"Complete example"),(0,r.kt)("p",null,"The following is the complete example of the above code blocks, this also includes using token provider to get token information."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"// The network which token(Both native and contract token like ERC-20 or ERC-721) are on.\nconst network = 'ethereum'\n\n// Initialize the API provider for the network.\nconst priceProvider = adapterFactory.getPriceProivder(network)\n\nasync function main() {\n    const nativeTokenPrices = await priceProvider.getNativeTokenPrice(['usd', 'jpy'])\n    console.log(nativeTokenPrices)\n    // Check the above result block (#1)\n\n    // Contract address of USDT\n    const usdtContractAddress = '0xdAC17F958D2ee523a2206206994597C13D831ec7'\n    const usdtTokenPrices = await priceProvider.getContractTokenPrice([usdtContractAddress], ['usd', 'jpy'])\n    console.log(usdtTokenPrices)\n    // Check the above result block (#2)\n\n    // To show the fiat amount of the user balance, it is required to have token information\n    const tokenProvider = adapterFactory.getTokenProvider(network)\n\n    //\n    // For contract token, for example USDT, you need to specific the address of the contract\n    const contractAddresses = ['0xdAC17F958D2ee523a2206206994597C13D831ec7']\n    const contractTokenBalances = await tokenProvider.getContractTokenBalances(address, contractAddresses)\n    console.log(contractTokenBalances)\n    // Check the above result block (#3)\n\n    // This object includes all the information required to calcuate fiat amount of the balance.\n    const tokenInfo = {\n        prices: usdtTokenPrices[0].prices,\n        ...contractTokenBalances\n    }\n    /**\n     * The following section create the intl object and use the underlying format API to return the balance value.\n     **/\n    // Optionally create cache to prevent memory leak\n    const cache = createIntlCache()\n    // Create the intl object includes different formatters\n    const intl = createIntl({\n            locale: 'en-US' // Set the locale of the formatter\n        }),\n        cache\n    )\n    \n    // Use the underlying formatter to return the fiat amount of the token\n    // Provide no options to use default formatting. By default it calcuated based on USD price without further formatting\n    const simpleValue = intl.formatTokenValue(tokenInfo)\n    console.log(simpleValue) // Returns \"1.001\" based on USD price\n\n    // Provide options for formatting. It is requires to denote the style in currency to show the currency sign\n    // Set the currency for the corresponding amount, the same currency value is required to be in \"prices\" object in the token\n    const valueWithSign = intl.formatTokenValue(token, {style: 'currency', currency: 'JPY'})\n    console.log(valueWithSign) // Returns \"\xa5147.92\" which is a JPY price\n}\n")),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"This section gives you the idea of how to establish a new instance of price provider and provide examples on some common usage using underlying APIs and related formatter from util. For more information on what the endpoints can do to help building your application, check the API endpoints reference."))}p.isMDXComponent=!0}}]);