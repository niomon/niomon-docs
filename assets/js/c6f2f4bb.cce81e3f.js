"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[168],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return k}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=a.createContext({}),s=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=s(n),k=o,m=u["".concat(i,".").concat(k)]||u[k]||p[k]||r;return n?a.createElement(m,l(l({ref:t},d),{},{components:n})):a.createElement(m,l({ref:t},d))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=u;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,l[1]=c;for(var s=2;s<r;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8440:function(e,t,n){n.r(t),n.d(t,{assets:function(){return i},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return r},metadata:function(){return c},toc:function(){return s}});var a=n(3117),o=(n(7294),n(3905));const r={sidebar_position:1},l="Token Metadata and Balance",c={unversionedId:"walletkit/data-provider/token-provider",id:"walletkit/data-provider/token-provider",title:"Token Metadata and Balance",description:"Introduction",source:"@site/docs/walletkit/data-provider/token-provider.md",sourceDirName:"walletkit/data-provider",slug:"/walletkit/data-provider/token-provider",permalink:"/docs/walletkit/data-provider/token-provider",draft:!1,editUrl:"https://github.com/niomon/niomon-docs/blob/main/docs/walletkit/data-provider/token-provider.md",tags:[],version:"current",lastUpdatedAt:1667986870,formattedLastUpdatedAt:"Nov 9, 2022",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docs",previous:{title:"Data Provider",permalink:"/docs/walletkit/data-provider/"},next:{title:"Token Price",permalink:"/docs/walletkit/data-provider/price-provider"}},i={},s=[{value:"Introduction",id:"introduction",level:2},{value:"Set up a data provider for token",id:"set-up-a-data-provider-for-token",level:2},{value:"Fetch metadata of a token",id:"fetch-metadata-of-a-token",level:2},{value:"Fetch token balance owned by a wallet",id:"fetch-token-balance-owned-by-a-wallet",level:2},{value:"Display token balance in a numerical format",id:"display-token-balance-in-a-numerical-format",level:2},{value:"Complete example",id:"complete-example",level:2},{value:"Summary",id:"summary",level:2}],d={toc:s};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"token-metadata-and-balance"},"Token Metadata and Balance"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"One of the most common usage for the data provider is to get crypto token metadata and balance of a user, the following sections state some common use cases and demonstrate how to do so."),(0,o.kt)("h2",{id:"set-up-a-data-provider-for-token"},"Set up a data provider for token"),(0,o.kt)("p",null,"To access token data, first you need an instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"DefaultAdapterFactory"),", which is an entry point to access the token data provider."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { DefaultAdapterFactory } from 'walletkit'\n\n// Optional cache manager to cache API result. To use a in-memory cache for testing, pass a null here.\nconst cacheManager = null\n\nconst adapterFactory = new DefaultAdapterFactory(\n  'demo', // Replace with your Alchemy API Key.\n  null,\n  cacheManager,\n)\n")),(0,o.kt)("p",null,"You can then use the factory (",(0,o.kt)("inlineCode",{parentName:"p"},"adapterFactory"),") to access data providers for supported networks. For example this is to return token provider in Ethereum network and access its underlying APIs."),(0,o.kt)("p",null,"Assume the factory is already established, you can use the factory to return token provider and access its underlying APIs, in this example, get the token provider from Ethereum network."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"// The network which token(Both native and contract token like ERC-20 or ERC-721) are on.\nconst network = 'ethereum'\n\n// Initialize the API provider for the network.\nconst tokenProvider = adapterFactory.getTokenProvider(network)\n")),(0,o.kt)("p",null,"You can read ",(0,o.kt)("a",{parentName:"p",href:"/docs/walletkit/getting-started"},"Getting Started")," on how to set up the adapter."),(0,o.kt)("h2",{id:"fetch-metadata-of-a-token"},"Fetch metadata of a token"),(0,o.kt)("p",null,"The contract of a token provides some metadata about the token. This information\nincludes token symbol and decimals. These information is required to present\ntoken information to the user, otherwise it will only be a contract address and\na balance."),(0,o.kt)("p",null,"In addition to contract-provided metadata, the data provider also provides\na token icon for display."),(0,o.kt)("p",null,"To get token metadata, you need to have the contract address of the token."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Example 1: Getting metadata of USDT"',title:'"Example',"1:":!0,Getting:!0,metadata:!0,of:!0,'USDT"':!0},"// Contract address of USDT on Ethereum mainnet\nconst contractAddress = '0xdAC17F958D2ee523a2206206994597C13D831ec7'\ntokenProvider.getTokenMetadata(contractAddress).then(console.log)\n")),(0,o.kt)("p",null,"This is the result of the above example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Example Result 1: Getting metadata of USDT"',title:'"Example',Result:!0,"1:":!0,Getting:!0,metadata:!0,of:!0,'USDT"':!0},'{\n    "contractAddress": "0xdAC17F958D2ee523a2206206994597C13D831ec7",\n    "decimals": 6,\n    "logo": "https://static.alchemyapi.io/images/assets/825.png",\n    "name": "Tether",\n    "network": "ethereum",\n    "symbol": "USDT",\n    "type": "contract"\n}\n')),(0,o.kt)("p",null,"Apart from ERC-20 token like USDT above, you can also get metadata of a NFT collection"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Example 2: Getting metadata of an NFT"',title:'"Example',"2:":!0,Getting:!0,metadata:!0,of:!0,an:!0,'NFT"':!0},"// Contract address of Azuki\nconst nftAddress = '0xED5AF388653567Af2F388E6224dC7C4b3241C544'\ntokenProvider.getTokenMetadata(nftAddress).then(console.log)\n")),(0,o.kt)("p",null,"This is the result of the above example (#2)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Example Result 2: Getting metadata of an NFT"',title:'"Example',Result:!0,"2:":!0,Getting:!0,metadata:!0,of:!0,an:!0,'NFT"':!0},'{\n    "contractAddress": "0xED5AF388653567Af2F388E6224dC7C4b3241C544", \n    "decimals": null,\n    "logo": null,\n    "name": "Azuki",\n    "network": "ethereum",\n    "symbol": "AZUKI",\n    "type": "contract"\n}\n')),(0,o.kt)("h2",{id:"fetch-token-balance-owned-by-a-wallet"},"Fetch token balance owned by a wallet"),(0,o.kt)("p",null,"You can get balance ownwed by a wallet for two types of tokens: a Native Token\n(like ETH) or a Contract Token (like USDT)."),(0,o.kt)("p",null,"To get token balance owned by a wallet, you need to have the wallet address. For contract token like ERC-20, you also need the contract address of the token. The following code shows how to do that:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Example 3: Getting token balance owned by a wallet"',title:'"Example',"3:":!0,Getting:!0,token:!0,balance:!0,owned:!0,by:!0,a:!0,'wallet"':!0},"// The address you would like to get balance\nconst address = '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'\n\n// For native token, for example Ethereum in its corresponding network\ntokenProvider.getNativeTokenBalance(address).then(console.log)\n\n// For contract token, for example USDT, you need to specific the address of the contract\nconst contractAddresses = ['0xdAC17F958D2ee523a2206206994597C13D831ec7']\ntokenProvider.getContractTokenBalances(address, contractAddresses).then(console.log)\n")),(0,o.kt)("p",null,"This is the result to get balance for native token:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Example Result 3: Getting token balance owned by a wallet"',title:'"Example',Result:!0,"3:":!0,Getting:!0,token:!0,balance:!0,owned:!0,by:!0,a:!0,'wallet"':!0},'// Balance of a native token\n{\n    "balance": "0x0f4240",\n    "network": "ethereum",\n    "type": "native"\n}\n\n// Balance of a contract token\n{\n    "balance": "0x0f4240",\n    "contractAddress": "0xdAC17F958D2ee523a2206206994597C13D831ec7",\n    "network": "ethereum",\n    "type": "contract"\n}\n')),(0,o.kt)("p",null,"For convenience, WalletKit provides ",(0,o.kt)("inlineCode",{parentName:"p"},"getTokenBalances")," function which can get multiple token balance at once, by then you don\u2019t need to get them one-by-one."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Example 4: Getting balance of mulitple tokens"',title:'"Example',"4:":!0,Getting:!0,balance:!0,of:!0,mulitple:!0,'tokens"':!0},'// Provide the list of tokens you would like to get\nconst tokens = [\n    {\n        "type": "native"\n    },\n    {\n        "contractAddress": "0xdAC17F958D2ee523a2206206994597C13D831ec7",\n        "type": "contract"\n    }\n]\n\ntokenProvider.getTokenBalances(\'0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\', tokens).then(console.log)\n')),(0,o.kt)("p",null,"This is the result using the above API:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Example Result 4: Getting balance of mulitple tokens"',title:'"Example',Result:!0,"4:":!0,Getting:!0,balance:!0,of:!0,mulitple:!0,'tokens"':!0},'[{\n    "balance": "0x0",\n    "network": "ethereum",\n    "type": "native"\n}, {\n    "balance": "0x0",\n    "contractAddress": "0xdAC17F958D2ee523a2206206994597C13D831ec7",\n    "network": "ethereum",\n    "type": "contract"\n}]\n')),(0,o.kt)("h2",{id:"display-token-balance-in-a-numerical-format"},"Display token balance in a numerical format"),(0,o.kt)("p",null,"The balance of the previous result is in hexdecimal format, which is not what user expects, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"tokenBalanceValueUnsafe")," utility function to do conversion to return numerical format."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"The function is called ",(0,o.kt)("inlineCode",{parentName:"p"},"tokenBalanceValueUnsafe")," because the value of a token\ncannot be displayed for very large or very small balance. In such situations the\nfunction returns an error. Make sure you check the error and fallback to\na default string for display.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Example 5: Showing numerical value of a token balance"',title:'"Example',"5:":!0,Showing:!0,numerical:!0,value:!0,of:!0,a:!0,token:!0,'balance"':!0},'import { \n    tokenBalanceValueUnsafe,\n    TokenBalance,\n    TokenMetadata\n } from \'walletkit\'\n\n// Metadata and balance data of the token. They can be get from previous sections\nconst token = {\n    "contractAddress": "0xdAC17F958D2ee523a2206206994597C13D831ec7",\n    "decimals": 6,\n    "logo": "https://static.alchemyapi.io/images/assets/825.png",\n    "name": "Tether",\n    "network": "ethereum",\n    "symbol": "USDT",\n    "type": "contract",\n    "balance": "0x0f4240"\n} as TokenBalance & TokenMetadata\n\nconst value = tokenBalanceValueUnsafe(token)\nconsole.log(value) // #6\n// This returns numerical amount "1", which means 1 USDT token\n')),(0,o.kt)("h2",{id:"complete-example"},"Complete example"),(0,o.kt)("p",null,"The following is the complete example of the above code blocks."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Complete example for showing token metadata and value"',title:'"Complete',example:!0,for:!0,showing:!0,token:!0,metadata:!0,and:!0,'value"':!0},'import { DefaultAdapterFactory } from \'walletkit\'\n\n// Set up the adapter for getting different features provider, check Getting Started for more details\nconst adapterFactory = new DefaultAdapterFactory(\n  \'demo\', // Replace with your Alchemy API Key.\n  null,\n  null,\n)\n\n// The network which token(Both native and contract token like ERC-20 or ERC-721) are on.\nconst network = \'ethereum\'\n\n// Initialize the API provider for the network.\nconst tokenProvider = adapterFactory.getTokenProvider(network)\n\nasync function main() {\n    // Contract address of USDT\n    const contractAddress = \'0xdAC17F958D2ee523a2206206994597C13D831ec7\'\n    const contractTokenMetadata = await tokenProvider.getTokenMetadata(contractAddress)\n    console.log(contractTokenMetadata)\n    // Check the above result block (#1)\n\n    // Contract address of Azuki\n    const nftAddress = \'0xED5AF388653567Af2F388E6224dC7C4b3241C544\'\n    const nftContractMetadata = await tokenProvider.getTokenMetadata(nftAddress)\n    console.log(nftContractMetadata)\n    // Check the above result block (#2)\n\n    // The address you would like to get balance\n    const address = \'0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\'\n    \n    // For native token, for example Ethereum in its corresponding network\n    const nativeTokenBalance = await tokenProvider.getNativeTokenBalance(address)\n    console.log(nativeTokenBalance)\n    // Check the above result block (#3)\n    \n    // For contract token, for example USDT, you need to specific the address of the contract\n    const contractAddresses = [\'0xdAC17F958D2ee523a2206206994597C13D831ec7\']\n    const contractTokenBalances = await tokenProvider.getContractTokenBalances(address, contractAddresses)\n    console.log(contractTokenBalances)\n    // Check the above result block (#4)\n\n    // Provide the list of tokens you would like to get\n    const tokens = [{\n        "type": "native"\n    }, {\n        "contractAddress": "0xdAC17F958D2ee523a2206206994597C13D831ec7",\n        "type": "contract"\n    }]\n    \n    const balances = await tokenProvider.getTokenBalances(\'0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\', tokens)\n    console.log(balances)\n    // Check the above result block (#5)\n\n    // Metadata and balance data of the token. They can be get from previous sections\n    const token = {\n        "contractAddress": "0xdAC17F958D2ee523a2206206994597C13D831ec7",\n        "decimals": 6,\n        "logo": "https://static.alchemyapi.io/images/assets/825.png",\n        "name": "Tether",\n        "network": "ethereum",\n        "symbol": "USDT",\n        "type": "contract",\n        "balance": "0x0f4240"\n    } as TokenBalance & TokenMetadata\n    \n    const value = tokenBalanceValueUnsafe(token)\n    console.log(value) // #6\n    // This returns numerical amount "1", which means 1 USDT token\n}\n\n')),(0,o.kt)("h2",{id:"summary"},"Summary"),(0,o.kt)("p",null,"This section gives you the idea of how to establish a new instance of token provider and provide examples on some common usage using underlying APIs. For more information on what the endpoints can do to help building your application, check the API endpoints reference."))}p.isMDXComponent=!0}}]);